mod browser;
mod config;
mod error;
mod telebot;
mod tracking;
mod util;
mod wbseller;

use browser::*;
use error::Result;

use crate::{config::Config, tracking::TrackingSupplies};

const LOGO: &str = r#"

 __      _____.     _________                   .__  .__
/  \    /  \_ |__  /   _____/__ ________ ______ |  | |__| ____   ______
\   \/\/   /| __ \ \_____  \|  |  \____ \\____ \|  | |  |/ __ \ /  ___/
 \        / | \_\ \/        \  |  /  |_> >  |_> >  |_|  \  ___/ \___ \
  \__/\  /  |___  /_______  /____/|   __/|   __/|____/__|\___  >____  >
       \/       \/        \/      |__|   |__|                \/     \/
"#;

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C –∏–ª–∏ SIGINT/SIGTERM)
async fn shutdown_signal() {
    #[cfg(windows)]
    {
        let _ = tokio::signal::ctrl_c().await;
    }

    #[cfg(unix)]
    {
        use tokio::signal::unix::{SignalKind, signal};
        let mut sigint = signal(SignalKind::interrupt()).expect("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ª—É—à–∞—Ç—å SIGINT");
        let mut sigterm = signal(SignalKind::terminate()).expect("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ª—É—à–∞—Ç—å SIGTERM");

        tokio::select! {
            _ = sigint.recv() => {},
            _ = sigterm.recv() => {},
        }
    }

    println!("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É...");
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async fn startup() -> Result<&'static Config> {
    // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if config::init_if_not().expect("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    {
        let full_config_path = std::env::current_dir()?.join(config::CONFIG_PATH);
        println!(
            "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—É—Ç–∏: {:?}",
            full_config_path
        );
        let _ = open::that_in_background(full_config_path);
    }

    let cfg = config::get();

    // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if cfg.launch_options.first_run {
        let mut browser_config = cfg.browser.clone();
        browser_config.headless = false;
        let bs_config = browser_config.to_browser_session_config();
        let mut bs = BrowserSession::launch(&bs_config).await?;
        let page = bs.open("https://seller.wildberries.ru").await?;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –¥–ª—è –≤—Ö–æ–¥–∞
        tokio::spawn(async move {
            tokio::time::sleep(std::time::Duration::from_secs(1)).await;
            let _ = page
                .evaluate(r#"alert("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")"#)
                .await;
            let _ = page.close().await;
        });

        println!("–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞");
        println!("–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:");
        let _ = std::io::stdin().read_line(&mut String::new());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if wbseller::Client::from_browser_session(&bs).await.is_ok() {
            println!("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!");
        } else {
            panic!(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ seller.wildberries.ru"
            );
        }

        bs.close().await;
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    if cfg.launch_options.telegram_notifications
        && (cfg.telegram_bot.token.is_empty() || cfg.telegram_bot.allow_users.is_empty())
    {
        println!("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    }

    Ok(cfg)
}

#[tokio::main]
async fn main() -> Result<()> {
    println!("\x1b[95m{}\x1b[0m\n", LOGO);
    let cfg = startup().await?;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
    let bot = if cfg.launch_options.telegram_notifications
        && !cfg.telegram_bot.token.is_empty()
        && !cfg.telegram_bot.allow_users.is_empty()
    {
        let token = cfg.telegram_bot.token.clone();
        let allow_users = cfg
            .telegram_bot
            .allow_users
            .iter()
            .map(ToString::to_string)
            .collect::<Vec<_>>();
        Some(
            telebot::BotBuilder::new(token)
                .add_chat_ids(allow_users)
                .parse_mode("HTML")
                .build(),
        )
    } else {
        None
    };

    // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏ —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
    let bs_config = cfg.browser.to_browser_session_config();
    let tracking_supplies = TrackingSupplies::watch(&bs_config).await?;
    let mut rx = tracking_supplies.subscribe_channel().await;

    let shutdown_handle = tokio::spawn({
        async move {
            shutdown_signal().await;
            tracking_supplies.close().await;
        }
    });

    println!("–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω");

    while rx.changed().await.is_ok() {
        let data = rx.borrow_and_update();
        if data.is_err() {
            break;
        }
        if data.as_ref().unwrap().is_none() {
            continue;
        }
        let data = data.clone().unwrap().unwrap();

        if cfg.launch_options.verbose {
            println!("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫: {:#?}", data);
        }

        let urls: Vec<_> = data.keys().map(|k| util::preorder_id_to_url(*k)).collect();

        // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if cfg.launch_options.open {
            for url in &urls {
                open::with_in_background(url, "chrome");
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
        if let Some(ref b) = bot {
            let mut message = String::from("üîä <b><i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫</b></i>\n\n");
            let mut reply_markup = Vec::with_capacity(urls.len());

            for ((url, v), warehouse) in urls
                .iter()
                .zip(data.values())
                .zip(data.values().map(|v| &v.supply.warehouse_name))
            {
                message.push_str(&format!("‚ñ´Ô∏è <b>{}</b>\n", warehouse));

                let costs_info = v
                    .costs
                    .iter()
                    .map(|c| {
                        let short_date = c.date.split_once('T').map_or(&c.date[..], |(d, _)| d);
                        format!(
                            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{}</b>\n–î–∞—Ç–∞: <b>{}</b>",
                            c.coefficient, c.cost, short_date
                        )
                    })
                    .collect::<Vec<_>>()
                    .join("\n");

                message.push_str(&costs_info);
                message.push_str("\n\n");

                reply_markup.push(vec![telebot::types::InlineKeyboardMarkup {
                    text: warehouse.clone(),
                    url: url.to_string(),
                }]);
            }

            let _ = b.write(&message, Some(&reply_markup));
        }
    }

    let _ = shutdown_handle.await;
    Ok(())
}
